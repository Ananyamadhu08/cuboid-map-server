{"version":3,"sources":["../../../src/api/auth/authModel.ts"],"sourcesContent":["import { extendZodWithOpenApi } from \"@asteasolutions/zod-to-openapi\";\nimport { z } from \"zod\";\n\nextendZodWithOpenApi(z);\n\nexport const AuthRequestSchema = z\n  .object({\n    username: z\n      .string()\n      .min(3, { message: \"Username is required and must be at least 3 characters\" })\n      .openapi({ example: \"user123\" }),\n    password: z\n      .string()\n      .min(8, { message: \"Password is required and must be at least 8 characters\" })\n      .openapi({ example: \"securepassword\" }),\n    email: z.string().email({ message: \"A valid email is required\" }).openapi({ example: \"user@example.com\" }),\n  })\n  .openapi(\"AuthRequest\");\n\nexport const AuthResponseSchema = z\n  .object({\n    accessToken: z.string().openapi({ example: \"jwt.token.here\" }),\n    refreshToken: z.string().openapi({ example: \"refresh.token.here\" }),\n    username: z.string().openapi({ example: \"user123\" }),\n    email: z.string().email().openapi({ example: \"user@example.com\" }),\n  })\n  .openapi(\"AuthResponse\");\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAqC;AACrC,iBAAkB;AAAA,IAElB,4CAAqB,YAAC;AAEf,IAAM,oBAAoB,aAC9B,OAAO;AAAA,EACN,UAAU,aACP,OAAO,EACP,IAAI,GAAG,EAAE,SAAS,yDAAyD,CAAC,EAC5E,QAAQ,EAAE,SAAS,UAAU,CAAC;AAAA,EACjC,UAAU,aACP,OAAO,EACP,IAAI,GAAG,EAAE,SAAS,yDAAyD,CAAC,EAC5E,QAAQ,EAAE,SAAS,iBAAiB,CAAC;AAAA,EACxC,OAAO,aAAE,OAAO,EAAE,MAAM,EAAE,SAAS,4BAA4B,CAAC,EAAE,QAAQ,EAAE,SAAS,mBAAmB,CAAC;AAC3G,CAAC,EACA,QAAQ,aAAa;AAEjB,IAAM,qBAAqB,aAC/B,OAAO;AAAA,EACN,aAAa,aAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,iBAAiB,CAAC;AAAA,EAC7D,cAAc,aAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,qBAAqB,CAAC;AAAA,EAClE,UAAU,aAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,UAAU,CAAC;AAAA,EACnD,OAAO,aAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,mBAAmB,CAAC;AACnE,CAAC,EACA,QAAQ,cAAc;","names":[]}