{"version":3,"sources":["../../../src/api/map-capture/mapCaptureRepository.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nexport class MapCaptureRepository {\n  async saveCapture(data: {\n    userId: string;\n    title: string;\n    longitude: number;\n    latitude: number;\n    zoom: number;\n    bearing: number;\n    pitch: number;\n    imageUrl: string;\n  }) {\n    return prisma.mapCapture.create({\n      data,\n    });\n  }\n\n  async findAllCaptures() {\n    return prisma.mapCapture.findMany();\n  }\n\n  async findAllCapturesByUserId(userId: string, skip: number, take: number) {\n    return prisma.mapCapture.findMany({\n      where: { userId },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n      skip,\n      take,\n    });\n  }\n\n  async findCaptureById(id: string) {\n    return prisma.mapCapture.findUnique({\n      where: { id },\n    });\n  }\n\n  async findLatestCaptureByUserId(userId: string) {\n    return prisma.mapCapture.findFirst({\n      where: { userId },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n    });\n  }\n\n  async findTopCapturedRegions(userId: string) {\n    const result = await prisma.mapCapture.groupBy({\n      by: [\"longitude\", \"latitude\", \"title\", \"imageUrl\", \"pitch\", \"zoom\", \"bearing\"],\n      where: { userId },\n      _count: {\n        longitude: true,\n      },\n      orderBy: {\n        _count: {\n          longitude: \"desc\",\n        },\n      },\n      take: 3, // Get top 3 regions\n    });\n\n    return result.map((region) => ({\n      longitude: region.longitude,\n      latitude: region.latitude,\n      frequency: region._count.longitude,\n      title: region.title,\n      imageUrl: region.imageUrl,\n      pitch: region.pitch,\n      zoom: region.zoom,\n      bearing: region.bearing,\n    }));\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA6B;AAE7B,IAAM,SAAS,IAAI,2BAAa;AAEzB,IAAM,uBAAN,MAA2B;AAAA,EAChC,MAAM,YAAY,MASf;AACD,WAAO,OAAO,WAAW,OAAO;AAAA,MAC9B;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,kBAAkB;AACtB,WAAO,OAAO,WAAW,SAAS;AAAA,EACpC;AAAA,EAEA,MAAM,wBAAwB,QAAgB,MAAc,MAAc;AACxE,WAAO,OAAO,WAAW,SAAS;AAAA,MAChC,OAAO,EAAE,OAAO;AAAA,MAChB,SAAS;AAAA,QACP,WAAW;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,gBAAgB,IAAY;AAChC,WAAO,OAAO,WAAW,WAAW;AAAA,MAClC,OAAO,EAAE,GAAG;AAAA,IACd,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,0BAA0B,QAAgB;AAC9C,WAAO,OAAO,WAAW,UAAU;AAAA,MACjC,OAAO,EAAE,OAAO;AAAA,MAChB,SAAS;AAAA,QACP,WAAW;AAAA,MACb;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,uBAAuB,QAAgB;AAC3C,UAAM,SAAS,MAAM,OAAO,WAAW,QAAQ;AAAA,MAC7C,IAAI,CAAC,aAAa,YAAY,SAAS,YAAY,SAAS,QAAQ,SAAS;AAAA,MAC7E,OAAO,EAAE,OAAO;AAAA,MAChB,QAAQ;AAAA,QACN,WAAW;AAAA,MACb;AAAA,MACA,SAAS;AAAA,QACP,QAAQ;AAAA,UACN,WAAW;AAAA,QACb;AAAA,MACF;AAAA,MACA,MAAM;AAAA;AAAA,IACR,CAAC;AAED,WAAO,OAAO,IAAI,CAAC,YAAY;AAAA,MAC7B,WAAW,OAAO;AAAA,MAClB,UAAU,OAAO;AAAA,MACjB,WAAW,OAAO,OAAO;AAAA,MACzB,OAAO,OAAO;AAAA,MACd,UAAU,OAAO;AAAA,MACjB,OAAO,OAAO;AAAA,MACd,MAAM,OAAO;AAAA,MACb,SAAS,OAAO;AAAA,IAClB,EAAE;AAAA,EACJ;AACF;","names":[]}