{"version":3,"sources":["../../../src/common/utils/httpHandlers.ts","../../../src/common/models/serviceResponse.ts"],"sourcesContent":["import type { NextFunction, Request, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport type { ZodSchema } from \"zod\";\n\nimport { ServiceResponse } from \"@/common/models/serviceResponse\";\n\nexport const handleServiceResponse = (serviceResponse: ServiceResponse<any>, response: Response) => {\n  return response.status(serviceResponse.statusCode).send(serviceResponse);\n};\n\nexport const validateRequest = (schema: ZodSchema) => (req: Request, res: Response, next: NextFunction) => {\n  // Validate using safeParse\n  const result = schema.safeParse(req.body);\n\n  if (!result.success) {\n    const zodError = result.error;\n\n    // Build a more detailed error message\n    const errorMessage = `Invalid input: ${zodError.errors.map((e) => `${e.path.join(\".\")} - ${e.message}`).join(\", \")}`;\n    const statusCode = StatusCodes.BAD_REQUEST;\n\n    const serviceResponse = ServiceResponse.failure(errorMessage, null, statusCode);\n    return handleServiceResponse(serviceResponse, res);\n  }\n\n  next();\n};\n","import { StatusCodes } from \"http-status-codes\";\nimport { z } from \"zod\";\n\nexport class ServiceResponse<T = null> {\n  readonly success: boolean;\n  readonly message: string;\n  readonly responseObject: T;\n  readonly statusCode: number;\n\n  private constructor(success: boolean, message: string, responseObject: T, statusCode: number) {\n    this.success = success;\n    this.message = message;\n    this.responseObject = responseObject;\n    this.statusCode = statusCode;\n  }\n\n  static success<T>(message: string, responseObject: T, statusCode: number = StatusCodes.OK) {\n    return new ServiceResponse(true, message, responseObject, statusCode);\n  }\n\n  static failure<T>(message: string, responseObject: T, statusCode: number = StatusCodes.BAD_REQUEST) {\n    return new ServiceResponse(false, message, responseObject, statusCode);\n  }\n}\n\nexport const ServiceResponseSchema = <T extends z.ZodTypeAny>(dataSchema: T) =>\n  z.object({\n    success: z.boolean(),\n    message: z.string(),\n    responseObject: dataSchema.optional(),\n    statusCode: z.number(),\n  });\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,IAAAA,4BAA4B;;;ACD5B,+BAA4B;AAC5B,iBAAkB;AAEX,IAAM,kBAAN,MAAM,iBAA0B;AAAA,EAC5B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAED,YAAY,SAAkB,SAAiB,gBAAmB,YAAoB;AAC5F,SAAK,UAAU;AACf,SAAK,UAAU;AACf,SAAK,iBAAiB;AACtB,SAAK,aAAa;AAAA,EACpB;AAAA,EAEA,OAAO,QAAW,SAAiB,gBAAmB,aAAqB,qCAAY,IAAI;AACzF,WAAO,IAAI,iBAAgB,MAAM,SAAS,gBAAgB,UAAU;AAAA,EACtE;AAAA,EAEA,OAAO,QAAW,SAAiB,gBAAmB,aAAqB,qCAAY,aAAa;AAClG,WAAO,IAAI,iBAAgB,OAAO,SAAS,gBAAgB,UAAU;AAAA,EACvE;AACF;;;ADjBO,IAAM,wBAAwB,CAAC,iBAAuC,aAAuB;AAClG,SAAO,SAAS,OAAO,gBAAgB,UAAU,EAAE,KAAK,eAAe;AACzE;AAEO,IAAM,kBAAkB,CAAC,WAAsB,CAAC,KAAc,KAAe,SAAuB;AAEzG,QAAM,SAAS,OAAO,UAAU,IAAI,IAAI;AAExC,MAAI,CAAC,OAAO,SAAS;AACnB,UAAM,WAAW,OAAO;AAGxB,UAAM,eAAe,kBAAkB,SAAS,OAAO,IAAI,CAAC,MAAM,GAAG,EAAE,KAAK,KAAK,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE,KAAK,IAAI,CAAC;AAClH,UAAM,aAAa,sCAAY;AAE/B,UAAM,kBAAkB,gBAAgB,QAAQ,cAAc,MAAM,UAAU;AAC9E,WAAO,sBAAsB,iBAAiB,GAAG;AAAA,EACnD;AAEA,OAAK;AACP;","names":["import_http_status_codes"]}