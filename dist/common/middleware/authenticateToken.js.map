{"version":3,"sources":["../../../src/common/middleware/authenticateToken.ts","../../../src/common/utils/jwtUtils.ts","../../../src/common/utils/envConfig.ts","../../../src/common/models/serviceResponse.ts"],"sourcesContent":["import type { User } from \"@prisma/client\";\nimport type { NextFunction, Response } from \"express\";\nimport { StatusCodes } from \"http-status-codes\";\nimport { JsonWebTokenError, TokenExpiredError } from \"jsonwebtoken\";\nimport { verifyToken } from \"../utils/jwtUtils\";\nimport { ServiceResponse } from \"./../models/serviceResponse\";\nimport type { AuthenticatedRequest } from \"./../types\";\n\nexport const authenticateToken = (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n  const authHeader = req.headers.authorization;\n\n  if (!authHeader) {\n    return res\n      .status(StatusCodes.UNAUTHORIZED)\n      .json(ServiceResponse.failure(\"Access denied. No token provided.\", null, StatusCodes.UNAUTHORIZED));\n  }\n\n  const token = authHeader.split(\" \")[1];\n\n  try {\n    const decoded = verifyToken(token) as { userId: string; iat: number; exp: number };\n    req.user = { id: decoded.userId } as User;\n\n    console.log(\"Decoded user from token:\", decoded);\n    console.log(\"User ID:\", req.user.id);\n\n    next();\n  } catch (err) {\n    if (err instanceof TokenExpiredError) {\n      console.error(\"Token expired:\", err.message);\n      return res\n        .status(StatusCodes.UNAUTHORIZED)\n        .json(ServiceResponse.failure(\"Token expired.\", null, StatusCodes.UNAUTHORIZED));\n    } else if (err instanceof JsonWebTokenError) {\n      console.error(\"Invalid token:\", err.message);\n      return res\n        .status(StatusCodes.FORBIDDEN)\n        .json(ServiceResponse.failure(\"Invalid token.\", null, StatusCodes.FORBIDDEN));\n    } else {\n      console.error(\"Token verification failed:\", err);\n      return res\n        .status(StatusCodes.INTERNAL_SERVER_ERROR)\n        .json(ServiceResponse.failure(\"Token verification failed.\", null, StatusCodes.INTERNAL_SERVER_ERROR));\n    }\n  }\n};\n","import jwt, { JsonWebTokenError, TokenExpiredError } from \"jsonwebtoken\";\nimport { env } from \"./envConfig\";\n\nconst secret = env.JWT_SECRET;\n\nexport function generateToken(userId: string): string {\n  return jwt.sign({ userId }, secret, { expiresIn: \"1d\" }); // Access token valid for 1 day\n}\n\nexport function generateRefreshToken(userId: string): string {\n  return jwt.sign({ userId }, secret, { expiresIn: \"7d\" }); // Refresh token valid for 7 days\n}\n\nexport function verifyToken(token: string, type: \"access\" | \"refresh\" = \"access\"): any {\n  try {\n    return jwt.verify(token, secret);\n  } catch (error) {\n    if (error instanceof TokenExpiredError) {\n      throw new TokenExpiredError(\"Token expired\", error.expiredAt);\n    } else if (error instanceof JsonWebTokenError) {\n      throw new JsonWebTokenError(\"Invalid token\");\n    } else {\n      throw new Error(\"Token verification failed\");\n    }\n  }\n}\n","import dotenv from \"dotenv\";\nimport { cleanEnv, host, num, port, str, testOnly } from \"envalid\";\n\ndotenv.config();\n\nexport const env = cleanEnv(process.env, {\n  NODE_ENV: str({ devDefault: testOnly(\"test\"), choices: [\"development\", \"production\", \"test\"] }),\n  HOST: host({ devDefault: testOnly(\"localhost\") }),\n  PORT: port({ devDefault: testOnly(3000) }),\n  CORS_ORIGIN: str({ devDefault: testOnly(\"http://localhost:5173\") }),\n  COMMON_RATE_LIMIT_MAX_REQUESTS: num({ devDefault: testOnly(1000) }),\n  COMMON_RATE_LIMIT_WINDOW_MS: num({ devDefault: testOnly(1000) }),\n  DATABASE_URL: str(),\n  JWT_SECRET: str(),\n});\n","import { StatusCodes } from \"http-status-codes\";\nimport { z } from \"zod\";\n\nexport class ServiceResponse<T = null> {\n  readonly success: boolean;\n  readonly message: string;\n  readonly responseObject: T;\n  readonly statusCode: number;\n\n  private constructor(success: boolean, message: string, responseObject: T, statusCode: number) {\n    this.success = success;\n    this.message = message;\n    this.responseObject = responseObject;\n    this.statusCode = statusCode;\n  }\n\n  static success<T>(message: string, responseObject: T, statusCode: number = StatusCodes.OK) {\n    return new ServiceResponse(true, message, responseObject, statusCode);\n  }\n\n  static failure<T>(message: string, responseObject: T, statusCode: number = StatusCodes.BAD_REQUEST) {\n    return new ServiceResponse(false, message, responseObject, statusCode);\n  }\n}\n\nexport const ServiceResponseSchema = <T extends z.ZodTypeAny>(dataSchema: T) =>\n  z.object({\n    success: z.boolean(),\n    message: z.string(),\n    responseObject: dataSchema.optional(),\n    statusCode: z.number(),\n  });\n"],"mappings":"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","names":["import_http_status_codes","import_jsonwebtoken","dotenv","jwt"]}